import scipy.ndimage.interpolation as scp
import numpy as np
from collections import Counter
import matplotlib.pyplot as plt

def augmentTrainingData(trainingDataList, counter = None):
    """

    :param trainingDataList:
    :param counter: Counter object with information on the failure rates for each numeral
    :return: new: A new training data list augmented with new trial data.  The new trial data is derived
                  from the prototypes and is in proportion to the failure rate of each numeral.

    """

    new = trainingDataList[ : ]     #make a shallow copy of the  list
    prototypes = dict()

    max = lambda value: 1 if value >= 1 else value
    maxVect = np.vectorize(max)

    min = lambda value : 0 if value < 0 else value
    minVect = np.vectorize(min)

    rotations = [-30, -15, 15, 30]

    f = 1.0
    h = 0.5
    q = 0.25
               #      1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    zeroA= np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, 0, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, h, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                     [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, q, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, q, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[0] = list()
    prototypes[0].append(zeroA)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    zeroB = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, q, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, 0, 0, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, h, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, q, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, q, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[0].append(zeroB)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    oneA =  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f ,f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28


    prototypes[1] = list()
    prototypes[1] .append(oneA)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    oneB =  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h ,f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, h, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[1].append(oneB)

           #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    oneC =  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h ,f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, f, f, f, f, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[1].append(oneC)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    twoA =  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, q, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, h, 0, 0, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, h, h, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, h, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, h, h, f, f, h, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, f, f, f, f, h, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[2] = list()
    prototypes[2].append(twoA)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    twoB =  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, q, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, h, 0, 0, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, h, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, f, f, f, f, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28


    prototypes[2].append(twoB)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    twoC =  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, q, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, f, f, f, f, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, h, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[2].append(twoC)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    treA =  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, q, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, h, 0, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, h, 0, 0, 0, 0, 0, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, q, f, f, 0, 0, 0, 0, 0, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, f, f, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[3] = list()
    prototypes[3].append(treA)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    treB =  np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, q, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, h, 0, 0, 0, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, h, 0, 0, 0, 0, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, 0, 0, 0, 0, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, h, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, h, h, f, f, f, f, f, f, f, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, h, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[3].append(treB)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    nineA = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, q, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, 0, q, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, f, f, f, h, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[9] = list()
    prototypes[9].append(nineA)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    nineB = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, h, q, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, q, f, f, h, q, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, q, 0, 0, 0, 0, 0, f, h, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, 0, q, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, f, f, f, h, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, f, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, q, h, f, f, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, q, h, f, f, f, f, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, h, f, f, f, f, f, h, q, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[9].append(nineB)

                #      1  2  3  4  5  5  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
    nineC = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, h, h, h, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, f, f, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, f, 0, f, 0, f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, h, f, f, 0, 0, 0, f, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, h, f, f, f, f, h, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, q, h, f, f, h, q, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, f, f, h, 0, 0, 0, 0, 0, 0, 0, 0],  # 25
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 26
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 27
                      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) # 28

    prototypes[9].append(nineC)

    for key in prototypes.keys():
        for idx in np.arange(len(prototypes[key])):
            for rotation in rotations:
                # plt.imshow(prototypes[9][idx])
                # plt.pause(5.0)
                # plt.close()

                new = scp.rotate(prototypes[key][idx], rotation)
                newRows = new.shape[0]
                newCols = new.shape[1]
                temp = np.zeros((28, 28))
                rowStart = (newRows - 28) // 2
                colStart = (newCols - 28) // 2
                temp[ : , :] = new[ rowStart : rowStart+28, colStart : colStart+28]
                temp = temp.reshape((784,1))
                temp *= np.random.binomial([np.ones(temp.shape)], .98)[0]
                # temp += np.random.binomial([np.ones(temp.shape)], .02)[0] * 0.1
                temp = temp.clip(0.001, 1)
                # temp = minVect(temp)
                # temp = maxVect(temp)

                e = np.zeros((10, 1))
                e[key] = 1
                trainingDataList.append((temp, e))

                temp = temp.reshape((28, 28))
                plt.imshow(temp)
                plt.pause(1.0)
                plt.close()

    return trainingDataList

def scramble(x):
    """
    There will be 8 versions of the trial data, x, added to the training data
    :param x: trial data
    :return: list of new trial data
    """
#    myInt = np.random.randint(8)
    x *= np.random.binomial([np.ones(x.shape)], .90)[0]             # drop some pixels
    x *= np.random.binomial([np.ones(x.shape)], .90)[0] * 1.1       # boost some pixels
    x += np.random.binomial([np.ones(x.shape)], .02)[0] * 0.1       # add some noise
    xArray = x.reshape((28, 28))

    rotations = [-30, -15, 15, 30]

    result = list()

    for myInt in np.arange(8):

        temp = np.zeros((28, 28))

        if myInt < 4:
            rotation = rotations[myInt]
            new = scp.rotate(xArray, rotation)
            newRows = new.shape[0]
            newCols = new.shape[1]
            rowStart = (newRows - 28) // 2
            colStart = (newCols - 28) // 2
            temp[:, :] = new[rowStart: rowStart + 28, colStart: colStart + 28]

        elif myInt == 4:      # deform left side down 1, right side up 1
            temp[2 : 15, 1 : 14] = xArray[1 : 14, 1 : 14]
            temp[15 : , 1 : 14] = xArray[14 : 27, 1 : 14]
            temp[13 : 26, 14 : 27] = xArray[14 : 27, 14 : 27]
            temp[ : 13, 14 : 27] = xArray[1 : 14, 14 : 27]

        elif myInt == 5:    # left up 1, right down 1
            temp[ : 13, 1: 14] = xArray[1: 14, 1: 14]
            temp[13 : 26, 1: 14] = xArray[14: 27, 1: 14]
            temp[15: , 14: 27] = xArray[14: 27, 14: 27]
            temp[2: 15, 14: 27] = xArray[1: 14, 14: 27]

        elif myInt == 6:    # top right 1, bottom left 1
            temp[1 : 14, 2: 15] = xArray[1: 14, 1: 14]
            temp[14 : 27, : 13] = xArray[14: 27, 1: 14]
            temp[14 : 27, 13: 26] = xArray[14: 27, 14: 27]
            temp[1 : 14, 15 : ] = xArray[1: 14, 14: 27]

        else:               # top left 1, bottom right 1
            temp[1 : 14, : 13] = xArray[1: 14, 1: 14]
            temp[14 : 27, 2 : 15] = xArray[14: 27, 1: 14]
            temp[14 : 27, 15 : ] = xArray[14: 27, 14: 27]
            temp[1 : 14, 13 : 26] = xArray[1: 14, 14: 27]

        result.append(temp.reshape((784,1)))

    return result


def augmentTrainingData2(trainingDataList, evalDataList, feedforward, initial = True):

     if not initial:
         badResults = []

         for (x, y) in evalDataList:  # look for trials that fail in verification data
             currentResult = np.argmax(feedforward(x, useDropout=False))
             if (currentResult != y):  # didn't match so mark a bad rusult for that label
                 badResults.append(y)

         badResultCounter = Counter(badResults)
         baddest = dict(badResultCounter.most_common(5))    # find five worst labels (most incorrect classifications)

         for (x, y) in trainingDataList:    # find failing training data and generate new data from it
             key = np.argmax(y)
             if (key in baddest.keys()) and (baddest[key] != 0):
                 currentResult = np.argmax(feedforward(x, useDropout=False))
                 if (currentResult != key):
                     scrambled = scramble(x)        # list of scrambled vestions of x
                     for idx in np.arange(len(scrambled)):
                        trainingDataList.append((scrambled[idx], y))
                     baddest[key] -= 1

         return trainingDataList

     else:

         for idx in np.arange(len(trainingDataList)):
             x = trainingDataList[idx][0]
             y = trainingDataList[idx][1]
             currentResult = np.argmax(feedforward(x, useDropout=False))
             label = np.argmax(y)
             if (currentResult != label): # didn't match so check if its in top 2
                 temp = np.argsort(currentResult, axis=0)
                 top = list(temp[8 : ])                             # top choices
                 if not(label in top):                              # label not in top choices
                     scrambled = scramble(x)                        # list of scrambled versions of x
                     for idx in np.arange(len(scrambled)):
                        trainingDataList.append((scrambled[idx], y))

         return trainingDataList

#******************************************************************************
#                            Sandbox
#******************************************************************************

# y = np.zeros((10, 1))
# x = np.zeros((784, 1))
# test = [(x, y)]
#
# augmentTrainingData(test)

#******************************************************************************
#                       Useless Junk
#******************************************************************************

    # if epoch >= 5:
    #     exp = 2 ** epoch
    #     for (x, y) in self.trainingDataList:
    #         currentResult = np.argmax(self.feedforward(x, useDropout=False))
    #         if (epoch <= 8):
    #             if (currentResult != np.argmax(y)) and (1 == np.random.randint(exp)):  # didn't match and randomly selected
    #                 x *= np.random.binomial([np.ones(x.shape)], .80)[0]
    #                 x += np.random.binomial([np.ones(x.shape)], .2)[0] * 0.5
    #                 x = fVect(x)
    #                 self.trainingDataList.append((x, y))    #append failed trial
    #         else:
    #             if (currentResult == np.argmax(y)) and (1 == np.random.randint(exp)):   #did match and randomly selected
    #                 x *= np.random.binomial([np.ones(x.shape)], .80)[0]
    #                 x += np.random.binomial([np.ones(x.shape)], .2)[0] * 0.2
    #                 x = fVect(x)
    #                 self.augmentTrainingData(x, y)           #send augmentation which distorts it some more

    # if epoch == 10:
    #     for (x, y) in self.evalDataList:  # look for trials that fail in verification data
    #         currentResult = np.argmax(self.feedforward(x, useDropout=False))
    #         if (currentResult != y):  # didn't match so generate new training data from it
    #             vectorY = vectorized_result(y)
    #             self.augmentTrainingData(x, vectorY)

    # if epoch == 10:
    #     for (x, y) in self.testDataList:  # look for trials that fail in test data
    #         currentResult = np.argmax(self.feedforward(x, useDropout=False))
    #         if (currentResult != y):  # didn't match so generate new training data from it
    #             vectorY = vectorized_result(y)
    #             self.augmentTrainingData(x, vectorY)

    # augment training data
    # for (x, y) in self.testDataList:
    #     currentResult = np.argmax(self.feedforward(x, useDropout=False))
    #     if (currentResult != y):  # didn't match save the label
    #         badResultLabels.append(y)
    #         labelCounter = Counter(badResultLabels)